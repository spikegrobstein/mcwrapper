#! /bin/bash

MCWRAPPER="$(readlink -f $0)"
MCWRAPPER_DIR=`dirname "$MCWRAPPER"`
MCWRAPPER_CONFIG_NAME="mcwrapper.conf"

# make sure that MCWRAPPER_DIR is an absolute path
# if the dir is '.' then set directory to current_directory 
if [[ "$MCWRAPPER_DIR" =~ ^\.$ ]]; then
	MCWRAPPER_DIR=`pwd`
	
# if the dir is relative, then build the path
# matches:
#    ./foo/bar
#    foo/bar
elif [[ "$MCWRAPPER_DIR" =~ ^(\.\.?/)|(\[^/\]) ]]; then
	MCWRAPPER_DIR=`pwd`"/${MCWRAPPER_DIR}"
fi

# default filename of the minecraft server
MINECRAFT_SERVER_NAME="minecraft_server.jar"

# filename of the minecraft server.properties file
MINECRAFT_SERVER_PROPERTIES_NAME="server.properties"

function print_usage {
	echo "USAGE:"
	echo "    $MCWRAPPER <action> [ <action_options> ]"
	echo ""
	echo "Action can be one of:"
	echo "    start   -- start the server if it's not already running"
	echo "    stop    -- stop a running server"
	echo "    restart -- restart a running server (issues stop, waits for it to stop, then starts)"
	echo "    status  -- whether the server is running or not"
	echo "    log     -- follows the server log as it's written to"
	echo "    config  -- used to read configuration information about mcwrapper"
	echo "               example: $MCWRAPPER config serverpath"
	echo "               valid configuration parameters are:"
	echo "                *  serverpath   -- absolute path to minecraft_server.jar"
	echo "                *  serverdir    -- absolute path to server directory (containing minecraft_server.jar)"
	echo "                *  pidfile      -- absolute path to mcwrapper pidfile"
	echo "                *  pid          -- the pid of the currently running minecraft server process"
	echo "                *  pipe         -- absolute path to the mcwrapper command pipe"
	echo "                *  command      -- the command that will be used to launch the minecraft server"
	echo "                *  backupdir    -- the path to the backup directory"
	echo "                *  latestbackup -- the path to the latest backup if there is one"
	echo "    prop    -- used to read server.properties configuration information"
	echo "               best when used with external scripts"
	echo "               example: $MCWRAPPER prop level-name"
	echo "    command -- execute a minecraft server command. As an alternative to writing to the FIFO. Also aliased as 'cmd'"
	echo "Any other action is interpretted as a server command and is directed to the minecraft server"
	echo "For README and other documentation, see: https://github.com/spikegrobstein/mcwrapper"
	echo ""
}

# figure out where the config file lives
function get_config_path {
	
	# if it's defined in an ENV var, then let's use that	
	if [[ ! -z "$MCWRAPPER_CONFIG_PATH" ]]; then
		echo $MCWRAPPER_CONFIG_PATH
		return
	fi
	
	# check ./mcwrapper.conf
	local CURRENT_PATH="${MCWRAPPER_DIR}/${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
	
	# check ~/.mcwrapper.conf
	CURRENT_PATH=~/".${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
		
	# check /etc/mcwrapper.conf
	CURRENT_PATH="/etc/${MCWRAPPER_CONFIG_NAME}"
	if [[ -e "$CURRENT_PATH" ]]; then
		echo $CURRENT_PATH
		return
	fi
	
	# if we can't find the config, it's no big deal. we'll just use defaults and not read it.
}

# configure self from config file
function read_config {
	CONFIG_PATH=`get_config_path`
	
	# if it's not found, don't do shit. stick with default values.
	if [[ -z "$CONFIG_PATH" || ! -e "$CONFIG_PATH" ]]; then
		return
	fi
	
	# it was found, so we read it by sourcing it.
	. "$CONFIG_PATH"	
}

function default_config {
	# path to the minecraft_server.jar
	# if this is not defined in the existing environment, define here.
	if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then

		# check in the current directory first, then check one level up for minecraft.
		# if it's not actually where it thinks it is, it'll break when it tries to do something.
		# the resulting value of MINECRAFT_SERVER_PATH will be the last place that it looked.

		MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/${MINECRAFT_SERVER_NAME}"
		
		if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
			MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/../${MINECRAFT_SERVER_NAME}"
		fi

	fi
	
	# Java VM settings (increasing these never hurts)
	MX_SIZE="1024M"
	MS_SIZE="1024M"

	# these can be relative or absolute paths
	# if relative, they're relative to the mcwrapper executable
	PID_FILE="mcwrapper.pid"
	COMMAND_PIPE="command_input"

	# the directory of the minecraft_server.jar based off $MINECRAFT_SERVER_PATH
	MINECRAFT_SERVER_DIR_PATH=`dirname $MINECRAFT_SERVER_PATH`
	
	BACKUP_DIRECTORY_PATH="backups"
	
	# what the name of the symlink is.
	LATEST_BACKUP_NAME="latest"
	
	# how many backups to keep in the backups directory
	# (we automatically delete old backups)
	# TODO: implement the following rules.
	# set to -1 to retain ALL backups (never delete)
	# set to 0 to completely disable backups.
	BACKUPS_TO_KEEP=5
	
	# set backup name to
	#   +%Y%m%d       -- just the datestamp; no time.
	#   +%Y%m%d%H%M%S -- full timestamp including hour, minute, second
	CURRENT_BACKUP_NAME=`date +%Y%m%d%H%M%S`
}

# run this to process a loaded config
# some variables require some modification before they can be used
# for example $PID_FILE which can be relative or absolute.
# if relative, we want to prepend the MCWRAPPER_DIR to it.
function process_config {
	
	# MINECRAFT_SERVER_PATH can be relative or absolute
	if [[ ! "$MINECRAFT_SERVER_PATH" =~ ^/ && ! "$MINECRAFT_SERVER_PATH" =~ "$MCWRAPPER_DIR" ]]; then
		MINECRAFT_SERVER_PATH="${MCWRAPPER_DIR}/$MINECRAFT_SERVER_PATH"
	fi
	MINECRAFT_SERVER_DIR_PATH=`dirname $MINECRAFT_SERVER_PATH`
	
	# PID_FILE can be relative or absolute
	if [[ ! "$PID_FILE" =~ ^/ ]]; then
		PID_FILE="${MCWRAPPER_DIR}/$PID_FILE"
	fi
	
	# COMMAND_PIPE can be relative or absolute
	if [[ ! "$COMMAND_PIPE" =~ ^/ ]]; then
		COMMAND_PIPE="${MCWRAPPER_DIR}/$COMMAND_PIPE"
	fi
	
	# set MINECRAFT_SERVER_CMD
	# this may be overridden in the config, so if it's set already, don't set it.
	if [[ -z "$MINECRAFT_SERVER_CMD" ]]; then
		# command for starting minecraft_server.jar
		MINECRAFT_SERVER_CMD="java -Xmx${MX_SIZE} -Xms${MS_SIZE} -jar "$MINECRAFT_SERVER_PATH" nogui"
	fi
	
	# the path to the server.properties file
	if [[ -z "$SERVER_PROPERTIES_PATH" ]]; then
		SERVER_PROPERTIES_PATH=`dirname "$MINECRAFT_SERVER_PATH"`"/${MINECRAFT_SERVER_PROPERTIES_NAME}"
	fi
	
	# BACKUP_DIRECTORY_PATH can be relative or absolute
	if [[ ! "$BACKUP_DIRECTORY_PATH" =~ ^/ ]]; then
		BACKUP_DIRECTORY_PATH="${MCWRAPPER_DIR}/${BACKUP_DIRECTORY_PATH}"
	fi
}

function read_server_property {
	# takes 1 arg... the property name
	PROP_NAME=$1;shift
	
	if [[ ! -e "$SERVER_PROPERTIES_PATH" ]]; then
	  echo "Cannot locate server.properties path. ($SERVER_PROPERTIES_PATH)" >&2
	  exit 1
	fi
		
	cat "$SERVER_PROPERTIES_PATH" | grep "$PROP_NAME\=" | awk -F '=' '{ print $2 }'
}

function read_command {
	while true
	do
		INPUT=$( cat $COMMAND_PIPE )
		echo $INPUT
		
		# if the user said "stop" then exit after the command completes.
		if [[ "$INPUT" = "stop" ]]; then
			clean_up
			exit 0
		fi
	done
}

function send_command {
	check_is_running
	
	if [[ $? != 0 ]]; then
		echo "Server is NOT running. Not sending command" >&2
		exit 1
	fi
	
	COMMAND=$1
	echo "$COMMAND" > "$COMMAND_PIPE"
}

function create_pid {
	PID_VALUE=$1
	echo $PID_VALUE > $PID_FILE
}

function remove_pid {
	# clean up PID file when done.
	rm $PID_FILE
}

# reads the pidfile and echos it
# returns 1 if the pidfile does not exist or if there was an error reading it.
function read_pid {
	if [[ ! -e "$PID_FILE" ]]; then
		#echo "Server not running!" >&2
		return 1 # TODO: set up some real exit codes that are unique
	fi
	
	# TODO: detect errors reading the pid (not readable?) and return non-zero in one of those cases
	cat "$PID_FILE"
}

function check_is_running {
	PID=`read_pid`
	
	# if read_pid returned a non-zero status, then we're not running
	if [[ $? != 0 ]]; then
		return 1
	fi
	
	# check to see if we have a wrapper currently running
	kill -0 $PID 2>&- 1>&-
	if [[ $? != 0 ]]; then
		#echo "Server not running!" >&2
		return 1 # TODO: set up some real exit codes that are unique
	fi
	
	return 0
}

function set_up_pipe {
	if [[ ! -p "$COMMAND_PIPE" ]]; then
		mkfifo "$COMMAND_PIPE"
		
		if [[ $? != 0 ]]; then
			# if mkfifo failed, print error message, exit non-zero.
			echo "Error creating the pipe: $COMMAND_PIPE ($?)." >&2
			exit 1
		fi
	fi
}

function remove_pipe {
	if [[ -p "$COMMAND_PIPE" ]]; then
		rm "$COMMAND_PIPE"
	fi
}

function start_minecraft {
	# write the PID file and start'er up!
	# don't start if we're already running.
	
	# TODO: this can be put into a single if statement for clarity; if [[ $(check_is_running) ]]
	check_is_running
	
	if [[ $? = 0 ]]; then
		echo "Server is already running. Exiting..." >&2
		exit 1
	fi
	
	set_up_pipe
	
	# now we `cd` to the minecraft_server directory and start the server in a background process
	cd $MINECRAFT_SERVER_DIR_PATH
	read_command | $MINECRAFT_SERVER_CMD &> /dev/null &
	
	create_pid $!	
}

# stops the minecraft server by sending it the 'stop' command via the FIFO
function stop_minecraft {
  # if $BACKUP_ON_EXIT is non-zero length, then backup the world before exiting.
  if [[ ! -z "$BACKUP_ON_EXIT" ]]; then
    echo ""
    echo -n "Backing up world data before exiting..." >&2
    ( backup_world )
    # TODO: check status of backup_world. Don't say "Done" if we didn't back anything up.
    echo "Done." >&2
  fi
  
	send_command "stop"
}

function restart_minecraft {
	stop_minecraft
	wait_for_minecraft_to_stop
	start_minecraft
}

# waits for minecraft to stop
# TODO: Make this timeout and make time configurable.
function wait_for_minecraft_to_stop {
	check_is_running
	if [[ $? = 0 ]]; then
		# if it's still running... sleep for 1 second and try again
		echo -n "."
		sleep 1
		wait_for_minecraft_to_stop
	fi
}

function server_log_path {
	echo "${MINECRAFT_SERVER_DIR_PATH}/server.log"
}

function check_server_log_exists {
	local SERVER_LOG_PATH=`server_log_path`
	
	# make sure that the log file exists before trying to tail it.
	if [[ ! -e "$SERVER_LOG_PATH" ]]; then
		echo "Server log not found! ($SERVER_LOG_PATH)" >&2
		echo ""
		exit 1
	fi
}

# tail and follow the server.log
# ^C to stop
function tail_server_log {
	local SERVER_LOG_PATH=`server_log_path`
	check_server_log_exists
	
	tail -F "$SERVER_LOG_PATH"
}

function sanity_check {
	# TODO: add checks to make sure that PID_FILE and COMMAND_PIPE are writable
	
	# check to make sure that things that need to exist exist.
	if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
		# the minecraft server path does not exist.
		echo "Minecraft server not found! ($MINECRAFT_SERVER_PATH)"
		exit 1
	fi
}

# performs cleanup after stopping mcwrapper
# removes pid and pipe
function clean_up {
	remove_pid
	remove_pipe
}

##########################################################################################
## MCBackup portion: ============>>>>>>>>>>>>


# create the backup directory
# if it exists, this effectively does nothing.
function create_backup_directory () {
	mkdir -p "$CURRENT_BACKUP_PATH"
	
	if [[ $? != 0 ]]; then
		#an error occurred
		echo "An error occurred when creating the backup directory." >&2
		exit 1
	fi
}

# stop writing to the world file(s) after flushing the buffer
function stop_writing_world () {
	send_command "save-all"
	send_command "save-off"
}

# begin writing the world data again
function start_writing_world () {
	send_command "save-on"
}

# copy the world data and configuration
function do_backup () {
	local LEVEL_NAME=`read_server_property level-name`
	local WORLD_DATA_DIR="${MINECRAFT_SERVER_DIR_PATH}/${LEVEL_NAME}"
	
	cp -R "$WORLD_DATA_DIR" "$CURRENT_BACKUP_PATH/"
	
	if [[ $? != 0 ]]; then
		#an error occurred
		echo "An error occurred when copying the world data." >&2
		exit 1
	fi
	
	cp -R "${MINECRAFT_SERVER_DIR_PATH}/"*.{txt,properties} "$CURRENT_BACKUP_PATH/"
	
	if [[ $? != 0 ]]; then
		#an error occurred
		echo "An error occurred when copying the configuration information" >&2
		exit 1
	fi
	
	if [[ ! -z "$COMPRESS_BACKUP" ]]; then
		# TODO: add support for bz2
		# TODO: make this code a little more readable without the secret, back alley variable updating.
		case "$COMPRESS_BACKUP" in
			zip )
				zip_backup
				;;
			tgz )
				tgz_backup
				;;
			* )
				echo "UKNOWN COMPRESSION TYPE: $COMPRESS_BACKUP"
				exit 1
				;;
		esac
		
		# after the backup is compressed, remove the uncompressed version
		rm -rf "$CURRENT_BACKUP_PATH"
		
		# ARCHIVE_FILENAME gets set in the compressor ({tgz,zip}_backup) functions
		# we set CURRENT_BACKUP_PATH so the symlink gets pointed to the archive rather than the directory we just deleted
		CURRENT_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/${ARCHIVE_FILENAME}"
	fi
}


#TODO: there's some duplicate code here... should probably fix it.
function tgz_backup {
	# cd to the backup directory
	# create new tgz backup
	cd "$BACKUP_DIRECTORY_PATH"
	
	local FILENAME=`basename "$CURRENT_BACKUP_PATH"`
	ARCHIVE_FILENAME="${FILENAME}.tgz"
	
	tar cfz "$ARCHIVE_FILENAME" "$FILENAME"	
	
	cd -
}

function zip_backup {
	cd "$BACKUP_DIRECTORY_PATH"
	
	local FILENAME=`basename "$CURRENT_BACKUP_PATH"`
	ARCHIVE_FILENAME="${FILENAME}.zip"
	
	zip -q -r "$ARCHIVE_FILENAME" "$FILENAME"
	
	cd -
}

function create_symlink () {
	# then we symlink the current backup to "latest" in backups directory
	if [[ -L "$LATEST_BACKUP_PATH" ]]; then
		# if the symlink already exists, delete it before creating it.
		rm "$LATEST_BACKUP_PATH"
		
		if [[ $? != 0 ]]; then
			#an error occurred
			echo "An error occurred when deleting the old symlink." >&2
			exit 1
		fi
	fi
	
	# just the directory/filename of the current backup
	# this way, the symlink isn't an absolute path, so you can move the 
	# backup directory without issue.
	local NEW_BACKUP=`basename "$CURRENT_BACKUP_PATH"`
	
	ln -s "$NEW_BACKUP" "$LATEST_BACKUP_PATH"
	
	if [[ $? != 0 ]]; then
		#an error occurred
		echo "An error occurred when creating the symlink." >&2
		exit 1
	fi
}

# delete old backups
function cleanup_old_backups () {
  if [[ "$BACKUPS_TO_KEEP" = "-1" ]]; then
    # if we want infinite retention, then set BACKUPS_TO_KEEP to -1
    return
  fi
  
  echo "Cleaning up old backups..."
  
	OLD_BACKUPS=`ls -r "$BACKUP_DIRECTORY_PATH" | grep -v "$LATEST_BACKUP_NAME" | tail -n +"${BACKUPS_TO_KEEP}"`
	
	for old_backup in $OLD_BACKUPS; do
	  echo "Removing $old_backup"
		rm -rf "${BACKUP_DIRECTORY_PATH}/$old_backup"
		if [[ $? != 0 ]]; then
			#an error occurred but don't exit.
			echo "An error occurred when deleting a previous backup: ${old_backup}." >&2
		fi
	done
}

# call this to go through the whole backup procedure
# makes sure backup directory exists, makes sure we don't back up a worldfile that's actively being written to, backs it up, symlinks it. everything.
function backup_world {
  if [[ "$BACKUPS_TO_KEEP" = "0" ]]; then
    # set BACKUPS_TO_KEEP to "0" to disable backups entirely.
    echo ""
    echo "Backups are disabled. Not backing anything up."
    exit 1
  fi
  
	# the path to the to-be-backed-up directory
	CURRENT_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/$CURRENT_BACKUP_NAME"
	
	# the path to the symlink to the above.
	LATEST_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_NAME}"
	
	create_backup_directory
	
	# stop writing world if we're running
	if [[ $(check_is_running) ]]; then
		stop_writing_world
	fi
	
	do_backup
	
	# start writing world only if we're running
	if [[ $(check_is_running) ]]; then
		start_writing_world
	fi
	
	create_symlink
		
	cleanup_old_backups
}

## End MCBackup portion.
##########################################################################################

## begin meat of program:

if [[ $# -eq 0 ]]; then
	print_usage
	exit 0
fi

ACTION=$1;shift

# selfconfigure
default_config
read_config
process_config

# check to make sure that we're in a sane configuration
# function exits on error.
sanity_check

# must cd to minecraft server directory to make sure support files are created in the correct place.

case $ACTION in
	start )
		echo -n "Starting minecraft... "	
		start_minecraft
		echo "Done."
		exit 0
		;;
	stop )
		echo -n "Stopping minecraft... "
		stop_minecraft
		echo "Done."
		exit 0
		;;
	restart )
		echo -n "Restarting minecraft..."
		restart_minecraft
		echo " Done."
		exit 0
		;;
	status )
		# TODO: this can be put into a single if statement for clarity; if [[ $(check_is_running) ]]
		check_is_running
		if [[ $? = 0 ]]; then
			echo "Server is running." >&2
			exit 0
		fi
		
		echo "Server is NOT running." >&2
		exit 1
		
		;;
	backup )
	  echo "Backing up minecraft world data..."
		backup_world
		echo "Done."
		exit 0
		;;
	log )
		check_server_log_exists
		echo "Tailing from: ${MINECRAFT_SERVER_DIR_PATH}/server.log" >&2
		echo "Press ^C to cancel." >&2
		echo "-------------------------------------------------------------------------------------------" >&2
		
		tail_server_log
		
		exit 0
		;;
	config )
		# dump info about the config
		CONFIG_SETTING=$1
		case $CONFIG_SETTING in
			serverpath )
				echo $MINECRAFT_SERVER_PATH
				exit 0
				;;
			serverdir )
				echo $MINECRAFT_SERVER_DIR_PATH
				exit 0
				;;
			pidfile )
				echo $PID_FILE
				exit 0
				;;
			pid )
				check_is_running
				if [[ $? != 0 ]]; then
					echo "Server is NOT running." >&2
					exit 1
				fi
				
				echo `read_pid`
				exit 0
				;;
			pipe )
				echo $COMMAND_PIPE
				exit 0
				;;
			configfile )
				echo $CONFIG_PATH
				exit 0
				;;
			command )
				echo $MINECRAFT_SERVER_CMD
				exit 0
				;;
			backupdir )
				echo $BACKUP_DIRECTORY_PATH
				exit 0
				;;
			latestbackup )
				# TODO: move this to a function to keep all this shit simple.
				LATEST_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_NAME}"
				
				# if the link doesn't exist, then warn the user and exit with a 1
				if [[ ! -L "$LATEST_BACKUP_PATH" ]]; then
					echo "Latest backup not found. Either never created or not a link or something. ($LATEST_BACKUP_PATH)" >&2
					exit 1
				fi
				
				# read the link to the latest backup
				LATEST_BACKUP_LINK=`readlink "$LATEST_BACKUP_PATH"`
				
				# if the link to the latest backup is absolute, output that, otherwise, build the path and output that.
				if [[ "$LATEST_BACKUP_LINK" =~ ^/ ]]; then
					echo $LATEST_BACKUP_LINK
					exit 0
				fi
				
				echo "${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_LINK}"				
				exit 0
				;;
			*)
				echo "Unknown config setting: $CONFIG_SETTING"
				exit 1
				;;
		esac
		;;
	prop )
		PROP=$1
		read_server_property $PROP
		exit 0
		;;
	help )
		print_usage
		exit 0
		;;
	command|cmd )
		COMMAND="$@"
		echo -n "sending: $COMMAND ... "
		send_command "$COMMAND"
		echo "Done."
		exit 0
		;;
	* )
		echo "Invalid action: $ACTION" >&2
		echo "" >&2
		print_usage
		exit 1
esac

exit 0


