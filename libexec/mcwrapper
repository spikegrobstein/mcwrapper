#! /bin/bash -

# exit immediately after an error
set -e

## MCWrapper
#  A utility for manging a Minecraft Server installation
#  Start, stop and safely back up your world data without service interruption.
#  https://github.com/spikegrobstein/mcwrapper
##

MCWRAPPER_VERSION="1.6.7pre"

#### Exit Codes

# no error
EXIT_SUCCESS=0

# generic bad exit code
EXIT_GENERIC_FAILURE=1

# bad commandline params
EXIT_BAD_PARAMS=2
EXIT_UNKNOWN_CONFIG_SETTING=3
EXIT_INVALID_ACTION=4

# server-running related failures
EXIT_SERVER_NOT_RUNNING=5
EXIT_SERVER_ALREADY_RUNNING=6
EXIT_SERVER_DISAPPEARED=7
EXIT_SERVER_CANNOT_START=8

# support file related codes:
EXIT_MINECRAFT_SERVER_NOT_FOUND=10
EXIT_NO_SERVER_PROPERTIES=11
EXIT_SERVER_LOG_NOT_FOUND=12

EXIT_MAKE_FIFO_FAILED=20
EXIT_SEND_COMMAND_FAILED=21

EXIT_NO_JAVA=30

EXIT_GENCONFIG_EXISTS=40
EXIT_GENCONFIG_ERROR=41

# backup related codes:
EXIT_CANNOT_CREATE_BACKUP_DIR=50
EXIT_CANNOT_BACKUP_WORLD_DATA=51
EXIT_CANNOT_BACKUP_CONFIGS=52
EXIT_FAILED_TO_DELETE_SYMLINK=53
EXIT_ERORR_CREATING_SYMLINK=54
EXIT_BACKUPS_DISABLED=55
EXIT_LATEST_BACKUP_NOT_FOUND=56
EXIT_CANNOT_RESTORE_WORLD=57

EXIT_BAD_COMPRESSION_TYPE=60

# installer related codes:
EXIT_CANNOT_BACKUP_OLD_MINECRAFT_SERVER=70
EXIT_DOWNLOAD_MINECRAFT_SERVER_FAILED=71
EXIT_CREATE_MINECRAFT_SERVER_DIR_FAILED=72
EXIT_CANNOT_MOVE_MINECRAFT_SERVER=73
EXIT_EXISTING_MINECRAFT_SERVER_NOT_FOUND=74

# misc other codes:
EXIT_NOT_IMPLEMENTED=98
EXIT_RUNNING_AS_ROOT=99

#### End Exit Codes

## basic constants to be used through the app
#
# initialize some variables about the location of mcwrapper and its support files.
pushd "$(dirname "$0")" &> /dev/null
MCWRAPPER_DIR="$PWD"
popd &> /dev/null
MCWRAPPER="$(basename "$0")"

# The name of the mcwrapper config file
# only changeable if done via env variable when launching mcwrapper
MCWRAPPER_CONFIG_NAME=${MCWRAPPER_CONFIG_NAME-mcwrapper.conf}

# STDERR echo function for error output
function warn {
  echo $@ >&2
}

# Given a message and optional exit code
# spit out a warning on STDERR and exit with the given code
# if the exit code is omitted, exit with a 1 status.
function die {
  local MSG=$1;shift
  local EXIT_CODE=${1-1};shift

  warn $MSG
  exit $EXIT_CODE
}

function print_usage {
  local MCWRAPPER_NAME=$( basename $0 )

  echo "USAGE:"
  echo "    $MCWRAPPER_NAME <action> [ <action_options> ]"
  echo ""
  echo "Action can be one of:"
  echo "    help      -- this usage screen"
  echo "    version   -- outputs mcwrapper's version number"
  echo "    about     -- output information about mcwrapper"
  echo "    start     -- start the server if it's not already running"
  echo "    stop      -- stop a running server"
  echo "    restart   -- restart a running server (issues stop, waits for it to stop, then starts)"
  echo "    status    -- whether the server is running or not"
  echo "    check     -- runs basic sanity checks"
  echo "    install   -- runs an installation wizard to walk you through setup"
  echo "    update    -- update your Minecraft Server binary"
  echo "    log       -- follows the server log as it's written to"
  echo "    backup    -- safe backup of your Minecraft world data"
  echo "    restore   -- restore a specified backup. Takes the path to the backup as an argument"
  echo "                 restoring from a backup will cause a hard restart of the server and"
  echo "                 all users will be disconnected. A non-destructive backup of current world"
  echo "                 data will be created."
  echo "                 example: $MCWRAPPER_NAME restore /usr/local/minecraft/backups/20121118235500"
  echo "    genconfig -- copy the default config file to \$MINECRAFT_SERVER_PATH"
  echo "    config    -- used to read configuration information about mcwrapper"
  echo "                 example: $MCWRAPPER_NAME config serverpath"
  echo "                 valid configuration parameters are:"
  echo "                  *  serverpath       -- absolute path to minecraft_server.jar"
  echo "                  *  serverdir        -- absolute path to server directory (containing minecraft_server.jar)"
  echo "                  *  pidfile          -- absolute path to mcwrapper pidfile"
  echo "                  *  pid              -- the pid of the currently running minecraft server process"
  echo "                  *  pipe             -- absolute path to the mcwrapper command pipe"
  echo "                  *  command          -- the command that will be used to launch the minecraft server"
  echo "                  *  backupdir        -- the path to the backup directory"
  echo "                  *  latestbackup     -- the path to the latest backup if there is one"
  echo "                  *  backup-retention -- the number of backups to keep before deleting old ones"
  echo "    prop      -- used to read server.properties configuration information"
  echo "                 best when used with external scripts"
  echo "                 example: $MCWRAPPER_NAME prop level-name"
  echo "                 if no property name is supplied, mcwrapper will print out all property keys from the file."
  echo "    command   -- execute a minecraft server command. As an alternative to writing to the FIFO. Also aliased as 'cmd'"
  echo ""
  echo "For README and source code, see: https://github.com/spikegrobstein/mcwrapper"
  echo "For additional documentation, see: https://github.com/spikegrobstein/mcwrapper/wiki"
  echo ""
}

function print_version {
  echo "mcwrapper $MCWRAPPER_VERSION"
}

function print_about {
  print_version
  echo "https://github.com/spikegrobstein/mcwrapper"
  echo "Finally, simplified management of your Minecraft server."
  echo "Start, stop, monitor, backup."
  echo "Run with no arguments to see usage."
  echo ""
}

# figure out where the config file lives
# first check to see if it's set in the MCWRAPPER_CONFIG_PATH
# then check: ./mcwrapper.conf, ~/.mcwrapper.conf, /etc/mcwrapper.conf
function get_config_path {

  # if it's defined in an ENV var, then let's use that
  if [[ -n "$MCWRAPPER_CONFIG_PATH" ]]; then
    echo $MCWRAPPER_CONFIG_PATH
    return
  fi

  # check ./mcwrapper.conf
  local CURRENT_PATH="./${MCWRAPPER_CONFIG_NAME}"
  if [[ -e "$CURRENT_PATH" ]]; then
    echo $CURRENT_PATH
    return
  fi

  # check ~/.mcwrapper.conf
  CURRENT_PATH=~/".${MCWRAPPER_CONFIG_NAME}"
  if [[ -e "$CURRENT_PATH" ]]; then
    echo $CURRENT_PATH
    return
  fi

  # check /etc/mcwrapper.conf
  CURRENT_PATH="/etc/${MCWRAPPER_CONFIG_NAME}"
  if [[ -e "$CURRENT_PATH" ]]; then
    echo $CURRENT_PATH
    return
  fi

  # if we can't find the config, it's no big deal. we'll just use defaults and not read it.
}

# configure self from config file
function read_config {
  # set the global config path:
  local CONFIG_PATH=$(get_config_path)

  # if it's not found, don't do shit. stick with default values.
  if [[ -z "$CONFIG_PATH" || ! -e "$CONFIG_PATH" ]]; then
    return
  fi

  # it was found, so we read it by sourcing it.
  . "$CONFIG_PATH"
}

# set up the default global variables that should be pre-populated
# read_config and process_config will potentially override or add to these.
function default_config {
  # default filename of the minecraft server
  MINECRAFT_SERVER_NAME="minecraft_server.jar"

  # filename of the minecraft server.properties file
  MINECRAFT_SERVER_PROPERTIES_NAME="server.properties"

  # path to the minecraft_server.jar
  # if this is not defined in the existing environment, try to guess where it is
  if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then

    # check in the current directory first, then check one level up for minecraft.
    # if it's not actually where it thinks it is, it'll break when it tries to do something.
    # the resulting value of MINECRAFT_SERVER_PATH will be the last place that it looked.

    MINECRAFT_SERVER_PATH="./${MINECRAFT_SERVER_NAME}"

    if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
      unset MINECRAFT_SERVER_PATH
    fi

  fi

  # Java binary (uses one in PATH by default)
  JAVA_BIN="java"

  # Java VM settings (increasing these never hurts)
  MX_SIZE="1024M"
  MS_SIZE="1024M"

  # these can be relative or absolute paths
  # if relative, they're relative to the mcwrapper executable
  PID_FILE="mcwrapper.pid"
  COMMAND_PIPE="command_input"

  BACKUP_DIRECTORY_PATH="backups"

  # what the name of the symlink is.
  LATEST_BACKUP_NAME="latest"

  # how many backups to keep in the backups directory
  # (we automatically delete old backups)
  # set to -1 to retain ALL backups (never delete)
  # set to 0 to completely disable backups.
  BACKUPS_TO_KEEP=5

  # set backup name to
  #   +%Y%m%d       -- just the datestamp; no time.
  #   +%Y%m%d%H%M%S -- full timestamp including hour, minute, second
  CURRENT_BACKUP_NAME=$(date +%Y%m%d%H%M%S)
}

# run this to process a loaded config
# some variables require some modification before they can be used
# for example $PID_FILE which can be relative or absolute.
# if relative, we want to prepend the MINECRAFT_SERVER_DIR_PATH to it.
function process_config {
  if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then
    # TODO: make real error code for this
    return 1
  fi

  # the directory of the minecraft_server.jar based off $MINECRAFT_SERVER_PATH
  MINECRAFT_SERVER_DIR_PATH=$(dirname $MINECRAFT_SERVER_PATH)

  pushd "$MINECRAFT_SERVER_DIR_PATH" &> /dev/null
  MINECRAFT_SERVER_DIR=$(pwd)
  popd &> /dev/null

  # PID_FILE can be relative or absolute
  # if it's relative, make it absolute (relative to the minecraft_server_directory)
  if [[ ! "$PID_FILE" =~ ^/ ]]; then
    PID_FILE="${MINECRAFT_SERVER_DIR_PATH}/$PID_FILE"
  fi

  # COMMAND_PIPE can be relative or absolute
  # if it's relative, make it absolute.
  if [[ ! "$COMMAND_PIPE" =~ ^/ ]]; then
    COMMAND_PIPE="${MINECRAFT_SERVER_DIR_PATH}/$COMMAND_PIPE"
  fi

  # set MINECRAFT_SERVER_CMD
  # this may be overridden in the config, so if it's set already, don't set it.
  if [[ -z "$MINECRAFT_SERVER_CMD" ]]; then
    # command for starting minecraft_server.jar
    MINECRAFT_SERVER_CMD=$( default_minecraft_server_cmd "$JAVA_BIN" "$MINECRAFT_SERVER_PATH" )
  fi

  # the path to the server.properties file
  if [[ -z "$SERVER_PROPERTIES_PATH" ]]; then
    SERVER_PROPERTIES_PATH=$(dirname "$MINECRAFT_SERVER_PATH")"/${MINECRAFT_SERVER_PROPERTIES_NAME}"
  fi

  # BACKUP_DIRECTORY_PATH can be relative or absolute
  if [[ ! "$BACKUP_DIRECTORY_PATH" =~ ^/ ]]; then
    BACKUP_DIRECTORY_PATH="${MINECRAFT_SERVER_DIR_PATH}/${BACKUP_DIRECTORY_PATH}"
  fi
}

# copy the mcwrapper.conf-example file to the current directory
function copy_example_configuration {
  local GENCONFIG_PATH="./${MCWRAPPER_CONFIG_NAME}"

  if [[ -e "$GENCONFIG_PATH" ]]; then
    warn "$GENCONFIG_PATH already exists. Doing nothing."
    exit $EXIT_GENCONFIG_EXISTS
  fi

  cp "${MCWRAPPER_DIR}/../mcwrapper.conf-example" "$GENCONFIG_PATH" \
    || { warn "Error copying $GENCONFIG_PATH"; exit $EXIT_GENCONFIG_ERROR; }

  echo "Copied example configuration to $GENCONFIG_PATH"
}

function read_server_property {
  # takes 1 arg... the property name
  local PROP_NAME=$1;shift

  if [[ ! -e "$SERVER_PROPERTIES_PATH" ]]; then
    warn "Cannot locate server.properties path. ($SERVER_PROPERTIES_PATH)"
    exit $EXIT_NO_SERVER_PROPERTIES
  fi

  # if no property is supplied, just dump the entire properties file's keys
  if [[ -z "$PROP_NAME" ]]; then
    cat "$SERVER_PROPERTIES_PATH" | grep -v '^#' | awk -F '=' '{ print $1 }'
    return
  fi

  cat "$SERVER_PROPERTIES_PATH" | grep "^$PROP_NAME\=" | awk -F '=' '{ print $2 }'
}

function read_command {
  sleep 1

  # read from the command pipe via FD7 (needed for read timeout)
  # no special reason to use 7, it's just sufficiently high that it probably won't collide with anything.
  exec 7<> "$COMMAND_PIPE"

  # initialize INPUT to be empty string
  local INPUT=""

  # number of seconds between reads
  # this is needed to make sure the server is still running
  local READ_TIMEOUT=2

  while [[ "$INPUT" != 'stop' ]]; do
    read -t "$READ_TIMEOUT" -u 7 INPUT

    # if it timed out or got no input, then exit if server isnt' running.
    if [[ "$?" != 0 || -z "$INPUT" ]]; then
      check_is_running || exit $EXIT_SERVER_DISAPPEARED

      continue
    fi

    echo $INPUT

    # if the user said "stop" then exit after the command completes.
    if [[ "$INPUT" = "stop" ]]; then
      wait_for_minecraft_to_stop
      clean_up
      exit $EXIT_SUCCESS
    fi
  done
}

function send_command {
  check_is_running \
    || { warn "Server is NOT running. Not sending command" ; exit $EXIT_SERVER_NOT_RUNNING; }

  # echo the command into the command pipe to be picked up by the reader process:
  local COMMAND=$1
  (echo "$COMMAND" > "$COMMAND_PIPE") &> /dev/null \
    || { warn "Error sending command: '${COMMAND}' (${?})" ; exit $EXIT_SEND_COMMAND_FAILED; }
}

function create_pid {
  local PID_VALUE=$1
  echo $PID_VALUE > $PID_FILE
}

function remove_pid {
  # clean up PID file when done.
  if [[ -e "$PID_FILE" ]]; then
    rm -f "$PID_FILE"
  fi
}

# reads the pidfile and echos it
# returns 1 if the pidfile does not exist or if there was an error reading it.
function read_pid {
  if [[ ! -e "$PID_FILE" ]]; then
    #warn "Server not running!"
    return $EXIT_SERVER_NOT_RUNNING
  fi

  local PID=$(cat "$PID_FILE" 2>&1)

  if [[ $? != $EXIT_SUCCESS ]]; then
   return $EXIT_SERVER_NOT_RUNNING
  fi

  echo $PID
}

# this function can be overridden by defining it in mcwrapper.conf
# the interface of the function is that it should return 0 if it's running or non-zero if it's not
function check_is_running {
  local PID=$(read_pid)

  # if read_pid returned a non-zero status, then we're not running
  if [[ $? != $EXIT_SUCCESS ]]; then
    return $EXIT_SERVER_NOT_RUNNING
  fi

  # check to see if we have a wrapper currently running
  is_minecraft_running $PID || return $EXIT_SERVER_NOT_RUNNING

  return $EXIT_SUCCESS
}

# can be overridden for custom check
# is passed the PID/ID of the running instance (read from the pidfile)
# returns 0 if it's running or non-zero if it's not
function is_minecraft_running {
  local PID=$1

  # send a 0 signal to process to see if it's running.
  kill -0 "$PID" &> /dev/null
}

# ensure that the FIFO exists
function set_up_pipe {
  if [[ ! -p "$COMMAND_PIPE" ]]; then
    # if the file exists, but it's not a pipe, then we can't start.
    if [[ -e "$COMMAND_PIPE" ]]; then
      warn "Cannot create the pipe ($COMMAND_PIPE)"
      warn "A file or directory already exists."
      warn ""
      exit "$EXIT_MAKE_FIFO_FAILED"
    fi

    mkfifo "$COMMAND_PIPE" \
      || die "Error creating the pipe; $COMMAND_PIPE ($?)" $EXIT_MAKE_FIFO_FAILED
  fi
}

# remove the FIFO
function remove_pipe {
  if [[ -p "$COMMAND_PIPE" ]]; then
    rm -f "$COMMAND_PIPE"
  fi
}

function default_minecraft_server_cmd {
  local JAVA_BIN=$1
  local MINECRAFT_SERVER_PATH=$2

  echo "$JAVA_BIN" -Xmx${MX_SIZE} -Xms${MS_SIZE} -jar "$MINECRAFT_SERVER_PATH" nogui
}

# write the PID file and start'er up!
# don't start if we're already running.
# if FOREGROUND is defined, then start in foreground
# otherwise, ensure that pipe is created and start in background
function start_minecraft {
  check_is_running \
    && die "Server is already running. Exiting..." $EXIT_SERVER_ALREADY_RUNNING

  # now we go to the minecraft_server directory and start the server in a background process
  # need to go to the directory to make sure that the Minecraft server puts the files in the right place (it puts them in the CWD)
  pushd $MINECRAFT_SERVER_DIR_PATH &> /dev/null

  set_up_pipe
  if [[ $FOREGROUND -eq 1 ]]; then
    create_pid $(start_minecraft_in_foreground)
  else
    create_pid $(start_minecraft_in_background)
  fi

  # sleep for one second to make sure that the process actually started properly.
  sleep 1

  # verify that minecraft server actually started.
  check_is_running \
    || die "Could not start Minecraft Server." $EXIT_SERVER_CANNOT_START
}

# can be overridden
# responsible for starting the minecraft server process in the background
# returns the PID of the process
function start_minecraft_in_background {
  read_command | $MINECRAFT_SERVER_CMD &> /dev/null &
  echo $!
}

function start_minecraft_in_foreground {
  $MINECRAFT_SERVER_CMD
}

# stops the minecraft server by sending it the 'stop' command via the FIFO
function stop_minecraft {
  # if $BACKUP_ON_EXIT is non-zero length, then backup the world before exiting.
  if [[ -n "$BACKUP_ON_EXIT" ]]; then
    warn ""
    warn -n "Backing up world data before exiting..."
    ( backup_world )
    # TODO: check status of backup_world. Don't say "Done" if we didn't back anything up.
    warn "Done."
  fi

  send_command "stop"
  wait_for_minecraft_to_stop
}

function restart_minecraft {
  stop_minecraft
  wait_for_minecraft_to_stop
  start_minecraft
}

# waits for minecraft to stop
# TODO: Make this timeout and make time configurable.
function wait_for_minecraft_to_stop {
  if check_is_running; then
    # if it's still running... sleep for 1 second and try again
    echo -n "."
    sleep 1
    wait_for_minecraft_to_stop
  fi
}

function server_log_path {
  echo "${MINECRAFT_SERVER_DIR_PATH}/server.log"
}

# check if a file exists
# exits abnormally if file does not exist
# accepts 3 args:
#  * filename to check
#  * human-readable name of file for error
#  * exit code if fails. (default of 1)
function check_file_exists {
  local FILE_PATH=$1
  local FILE_DESC=${2-$FILE_PATH}
  local EXIT_CODE=${3-1}

  if [[ ! -e "$FILE_PATH" ]]; then
    die "${FILE_DESC} not found! ($FILE_PATH)" $EXIT_CODE
  fi
}

# tail and follow the server.log
# ^C to stop
function tail_server_log {
  local SERVER_LOG_PATH=$(server_log_path)

  check_file_exists "$SERVER_LOG_PATH" "Server log" $EXIT_SERVER_LOG_NOT_FOUND

  tail -F "$SERVER_LOG_PATH"
}

function sanity_check {
  # TODO: add checks to make sure that PID_FILE and COMMAND_PIPE are writable
  # TODO: make check for root user in here.

  # make sure that there is a java binary installed in the PATH
  if ! which "$JAVA_BIN" &> /dev/null; then
   warn "The java binary is not found."
   warn "Please install the necessary package(s) or specify the JAVA_BIN configuration option."
   warn ""
   exit $EXIT_NO_JAVA
  fi

  # check to make sure that things that need to exist exist.
  if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
    # the minecraft server path does not exist.
    warn "Minecraft server not found!"
    
    if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then
      warn "Default location: ./${MINECRAFT_SERVER_NAME}"
      warn "Or set MINECRAFT_SERVER_NAME"
    else
      warn "(MINECRAFT_SERVER_PATH=$MINECRAFT_SERVER_PATH)"
    fi
    warn ""
    exit $EXIT_MINECRAFT_SERVER_NOT_FOUND
  fi
}

# return a truthy value if we're running as root
function check_if_running_as_root {
  [[ $( id -u ) = 0 ]] \
    && return 0

  return 1
}

# absolutely, under no circumstances, let mcwrapper be run as root!!!!
# well, unless they set ALLOW_ROOT=1, then it's ok.
# this can be desireable under specific circumstances, so may as well have a workaround.
function exit_if_running_as_root {
  # if not running as root, just return and we're good.
  check_if_running_as_root \
    || return 0

  if [[ -z "$ALLOW_ROOT" ]]; then
    warn "You have started mcwrapper as root."
    warn "This is not recommended. Please run as an un-privilaged user."
    warn "If you *must* run as root, you can execute: ALLOW_ROOT=1 mcwrapper start"
    warn ""
    exit $EXIT_RUNNING_AS_ROOT
  elif [[ -n "$ALLOW_ROOT" ]]; then

    # spit out a warning unless SUPPORESS_ROOT_WARNING is set
    if [[ -z "$SUPPRESS_ROOT_WARNING" ]]; then
      warn "Warning: Running as root."
    fi

  fi
}

# performs cleanup after stopping mcwrapper
# removes pid and pipe
function clean_up {
  remove_pid
  remove_pipe
}

##########################################################################################
## Installer portion: ============>>>>>>>>>>>>

# runs through interactive installer
# confirm configuration
# download minecraft_server.jar
# sanity check
function run_installer () {
  echo "Welcome to the mcwrapper installer."
  echo "Before the Minecraft Server is installed, we must first confirm a few settings..."
  echo ""

  # check for configuration
  local CURRENT_CONFIG_PATH=$(get_config_path)

  # check for default configuration
  if [[ -z "$CURRENT_CONFIG_PATH" ]]; then
    echo "Using default configuration."
    echo "An example configuration is included in the mcwrapper package."
    echo "See mcwrapper.conf-example for details."
  else
    echo "mcwrapper config path: $CURRENT_CONFIG_PATH"
  fi
  echo ""

  # sanity check for minecraft server paths
  if [[ -z "$MINECRAFT_SERVER_PATH" ]]; then
    MINECRAFT_SERVER_PATH="./${MINECRAFT_SERVER_NAME}"
    MINECRAFT_SERVER_DIR_PATH="./"
  fi

  # show where minecraft_server.jar will be installed
  echo "Minecraft Server Path: $MINECRAFT_SERVER_PATH"

  if [[ -e "$MINECRAFT_SERVER_PATH" ]]; then
    echo -n "Minecraft server already exists! Do you wish to overwrite? [y/N]: "
    read OVERWRITE_SERVER
    if [[ "$OVERWRITE_SERVER" != 'y' ]]; then
      echo ""
      echo "Not overwriting server. Thanks, bye!"
      echo ""
      exit $EXIT_SUCCESS
    fi

    backup_old_server
  fi

  echo -n "Is this where you wish to install the Minecraft Server? [Y/n]: "
  read INSTALL_PATH_CORRECT
  if [[ "$INSTALL_PATH_CORRECT" != 'y' && -n "$INSTALL_PATH_CORRECT" ]]; then
    echo ""
    echo "Please update your mcwrapper.conf and re-run this installer."
    echo ""
    exit $EXIT_SUCCESS
  fi

  echo "Downloading and installing Minecraft Server..."
  download_minecraft_server

  # ok, so now the server is downloaded and copied to the right location.

  echo "Minecraft is downloaded and in place. You can now start it by running the following command:"
  echo "$MCWRAPPER start"

  exit 0
}

# download the minecraft_server.jar file
# parse the minecraft.net download page and look for the download link for the server
# then download that to the necessary place
# if anything hard-fails, it prints an error message and exits.
function download_minecraft_server () {

  which curl >/dev/null \
    || { warn "curl does not appear to be installed. This is required to download the Minecraft server"; exit $EXIT_NO_CURL; }

  # parse the download page and read the minecraft_server.jar download URI
  local MINECRAFT_SERVER_DOWNLOAD_URI=$( get_server_download_uri )

  # check if there was an error grabbing the download page (either curl returns a bad value or we didn't find the URI)
  if [[ "$?" != "0" || -z "$MINECRAFT_SERVER_DOWNLOAD_URI" ]]; then
    echo "There was an error locating the download link. www.minecraft.net down?"
    echo ""
    exit $EXIT_DOWNLOAD_MINECRAFT_SERVER_FAILED
  fi

  # build the minecraft_server.jar download URL
  local MINECRAFT_SERVER_DOWNLOAD_URL="${MINECRAFT_SERVER_DOWNLOAD_URI}"

  local MINECRAFT_SERVER_TEMP_FILE="/tmp/minecraft_server.jar"

  # if the tempfile exists, delete it
  if [[ -e "$MINECRAFT_SERVER_TEMP_FILE" ]]; then
    rm "$MINECRAFT_SERVER_TEMP_FILE"
  fi

  echo "Downloading Minecraft server from: $MINECRAFT_SERVER_DOWNLOAD_URL"

  # download the server to the temp directory  
  curl --progress-bar -L -o "$MINECRAFT_SERVER_TEMP_FILE" "$MINECRAFT_SERVER_DOWNLOAD_URL"

  # assuming that was successful, make sure the directories exist and move the binary to the right location
  local CURL_RETURN=$?
  if [[ "$CURL_RETURN" != "0" ]]; then
    echo "An error occurred ($CURL_RETURN) while downloading minecraft_server.jar from: $MINECRAFT_SERVER_DOWNLOAD_URL"
    echo ""
    exit $EXIT_DOWNLOAD_MINECRAFT_SERVER_FAILED
  elif [[ ! -s "$MINECRAFT_SERVER_TEMP_FILE" ]]; then
    echo "Failed downloading the minecraft server."
    echo "This is usually caused by a server error on minecraft.net."
    echo ""
    exit $EXIT_DOWNLOAD_MINECRAFT_SERVER_FAILED
  fi

  # make sure directories exit
  mkdir -p "$MINECRAFT_SERVER_DIR_PATH"
  if [[ $? != 0 ]]; then
    echo "Failed creating the minecraft server directory ($MINECRAFT_SERVER_DIR_PATH)"
    echo ""
    exit $EXIT_CREATE_MINECRAFT_SERVER_DIR_FAILED
  fi

  # move the minecraft server to the right place:
  mv "$MINECRAFT_SERVER_TEMP_FILE" "$MINECRAFT_SERVER_PATH"

  # check for errors when moving the minecraft_server.jar file
  if [[ "$?" != 0 ]]; then
    echo "An error occurred when moving minecraft_server.jar to the install directory."
    echo ""
    exit $EXIT_CANNOT_MOVE_MINECRAFT_SERVER
  fi
}

# pull html from the minecraft.net download page and parse it
# extract the linux minecraft_server download URI
function get_server_download_uri () {
  local MINECRAFT_DOWNLOAD_PAGE="http://minecraft.net/download"

  # fetch the page
  # pull all the links off it
  # filter down to only the linux server download link
  # extract the .jar URL
  curl -s "$MINECRAFT_DOWNLOAD_PAGE" \
    | grep -o -E '<a [^>]+>' \
    | grep -E 'data-platform=.linux' \
    | grep -E 'data-dist=.server' \
    | grep -o -E 'https:.+?jar'
}

# backs up an old minecraft_server.jar file before downloading a new one
# if something fails, it prints an error message and exits
function backup_old_server () {
  # back up the old minecraft server (just in case)
  if mv "$MINECRAFT_SERVER_PATH" "${MINECRAFT_SERVER_PATH}.old"; then
    warn "Failed backing up the old minecraft server!"
    warn ""
    exit $EXIT_CANNOT_BACKUP_OLD_MINECRAFT_SERVER
  fi
}

# basically the same as install without all of the confirmation levels
# if an existing minecraft server is not found, then bail.
function update_minecraft_server () {
  if [[ ! -e "$MINECRAFT_SERVER_PATH" ]]; then
    echo "Existing Minecraft Server not found! ($MINECRAFT_SERVER_PATH)"
    echo "Either run \`$MCWRAPPER install\` or make sure you install minecraft_server.jar in the above location."
    echo ""
    exit $EXIT_EXISTING_MINECRAFT_SERVER_NOT_FOUND
  fi

  echo "Updating server..."

  backup_old_server
  download_minecraft_server

  # if the server isn't running, then return.
  check_is_running || return

  read -p "Would you like to restart Minecraft Server? [Y/n]: " INPUT
  if [[ -z "$INPUT" || "$INPUT" == 'y' ]]; then
    echo -n "Restarting Minecraft Server..."
    restart_minecraft
    echo "Done."
  fi

}

## End Installer portion.
##########################################################################################
## MCBackup portion: ============>>>>>>>>>>>>


# create the backup directory
# if it exists, this effectively does nothing.
function create_backup_directory () {
  if ! mkdir -p "$CURRENT_BACKUP_PATH"; then
    # an error occurred
    warn "An error occurred when creating the backup directory."
    exit $EXIT_CANNOT_CREATE_BACKUP_DIR
  fi
}

# stop writing to the world file(s) after flushing the buffer
function stop_writing_world () {
  send_command "save-all"
  send_command "save-off"
}

# begin writing the world data again
function start_writing_world () {
  send_command "save-on"
}

# get the path to the current world directory
# this is built using the world name from server.properties and the
# minecraft server dir path
function world_dir_path () {
  local LEVEL_NAME=$(read_server_property level-name)
  local WORLD_DATA_DIR="${MINECRAFT_SERVER_DIR_PATH}/${LEVEL_NAME}"

  echo $WORLD_DATA_DIR
}

# if backups are disabled, then spit out a warning
#   returns 1 if doing a restore
#   exits with code if not doing a restore
# returns success if backups are enabled.
function backup_sanity_check {
  local WORLD_DIR_PATH=$( world_dir_path )

  are_backups_enabled \
    && return 0

  warn "Backups are disabled. Not backing anything up."

  is_doing_restore \
    && return 1

  exit $EXIT_BACKUPS_DISABLED
}

# call this to go through the whole backup procedure
# this is called by the 'backup' action
# makes sure backup directory exists,
# makes sure we don't back up a worldfile that's actively being written to, backs it up, symlinks it. everything.
function backup_world {
  # the path to the to-be-backed-up directory
  CURRENT_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/$CURRENT_BACKUP_NAME"

  backup_sanity_check || return 1

  create_backup_directory

  # the path to the symlink to the above.
  LATEST_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_NAME}"

  check_is_running && stop_writing_world

  do_backup "$CURRENT_BACKUP_PATH"

  check_is_running && start_writing_world

  if should_compress_backup; then
    CURRENT_BACKUP_PATH=$( compress_backup "$COMPRESS_BACKUP" "$CURRENT_BACKUP_PATH" )
  fi

  create_symlink
  cleanup_old_backups
}

function sanity_check_world_dir {
  local WORLD_DIR_PATH=$1

  [ -d "$WORLD_DIR_PATH" ] \
    || die "World data directory does not exist. Cannot backup." $EXIT_CANNOT_BACKUP_WORLD_DATA
}

# copy the world data and configuration
function do_backup () {
  local CURRENT_BACKUP_PATH=$1
  local WORLD_DIR_PATH=$( world_dir_path )

  sanity_check_world_dir "$WORLD_DIR_PATH"
  copy_world_to_backup_path "$WORLD_DIR_PATH" "$CURRENT_BACKUP_PATH"
  copy_support_files_to_backup_path "$MINECRAFT_SERVER_DIR_PATH" "$CURRENT_BACKUP_PATH"
}

function copy_world_to_backup_path {
  local WORLD_DATA_DIR=$1
  local CURRENT_BACKUP_PATH=$2

  cp -R "$WORLD_DATA_DIR" "$CURRENT_BACKUP_PATH/" \
    || die "An error occurred when copying the world data." $EXIT_CANNOT_BACKUP_WORLD_DATA
}

function copy_support_files_to_backup_path {
  local MINECRAFT_SERVER_DIR_PATH=$1
  local CURRENT_BACKUP_PATH=$2

  cp -R "${MINECRAFT_SERVER_DIR_PATH}/"*.{txt,properties} "$CURRENT_BACKUP_PATH" \
    || die "An error occurred when copying the configuration files." $EXIT_CANNOT_BACKUP_CONFIGS
}

function should_compress_backup {
  [[ -n "$COMPRESS_BACKUP" ]]
}

function compress_backup {
  local COMPRESSION_TYPE=$1
  local CURRENT_BACKUP_PATH=$2

  type -t "${COMPRESSION_TYPE}_backup" &> /dev/null \
    || die "Invalid compression type: ${COMPRESSION_TYPE}. \`${COMPRESSION_TYPE}_backup' is not a function" $EXIT_BAD_COMPRESSION_TYPE

  pushd $( dirname $CURRENT_BACKUP_PATH ) &> /dev/null

  local ARCHIVE_PATH=$( "${COMPRESSION_TYPE}_backup" $CURRENT_BACKUP_PATH )
  rm -rf "$CURRENT_BACKUP_PATH"

  popd &> /dev/null

  echo "$ARCHIVE_PATH"
}

function tgz_backup {
  local CURRENT_BACKUP_PATH=$1
  local ARCHIVE_PATH="${CURRENT_BACKUP_PATH}.tgz"

  tar cfz "$ARCHIVE_PATH" "$( basename "$CURRENT_BACKUP_PATH" )"

  echo "$ARCHIVE_PATH"
}

function zip_backup {
  local CURRENT_BACKUP_PATH=$1
  local ARCHIVE_PATH="${CURRENT_BACKUP_PATH}.zip"

  zip -q -r "$ARCHIVE_PATH" "$( basename "$CURRENT_BACKUP_PATH" )"

  echo "$ARCHIVE_PATH"
}

function create_symlink () {
  # then we symlink the current backup to "latest" in backups directory
  if [[ -L "$LATEST_BACKUP_PATH" ]]; then
    # if the symlink already exists, delete it before creating it.
    if ! rm "$LATEST_BACKUP_PATH"; then
      # an error occurred
      warn "An error occurred when deleting the old symlink."
      exit $EXIT_FAILED_TO_DELETE_SYMLINK
    fi
  fi

  # just the directory/filename of the current backup
  # this way, the symlink isn't an absolute path, so you can move the 
  # backup directory without issue.
  local NEW_BACKUP=$(basename "$CURRENT_BACKUP_PATH")

  if ! ln -s "$NEW_BACKUP" "$LATEST_BACKUP_PATH"; then
    # an error occurred
    warn "An error occurred when creating the symlink."
    exit $EXIT_ERORR_CREATING_SYMLINK
  fi
}

# delete old backups
function cleanup_old_backups () {
  if [[ "$BACKUPS_TO_KEEP" = "-1" ]]; then
    # if we want infinite retention, then set BACKUPS_TO_KEEP to -1
    return
  fi

  warn "Cleaning up old backups..."

  local ADJUSTED_BACKUPS_TO_KEEP=$(( $BACKUPS_TO_KEEP+1 ))
  OLD_BACKUPS=$(ls -r "$BACKUP_DIRECTORY_PATH" | grep -v "$LATEST_BACKUP_NAME" | tail -n +${ADJUSTED_BACKUPS_TO_KEEP} )

  for old_backup in $OLD_BACKUPS; do
    warn "Removing $old_backup"
    rm -rf "${BACKUP_DIRECTORY_PATH}/$old_backup"
    if [[ $? != 0 ]]; then
      #an error occurred but don't exit.
      warn "An error occurred when deleting a previous backup: ${old_backup}."
    fi
  done
}

function start_restore {
  DOING_RESTORE=1
}

function end_restore {
  unset DOING_RESTORE
}

function is_doing_restore {
  [[ -n "$DOING_RESTORE" ]]
}

# return 0 if backups are enabled
# backups are disabled if BACKUPS_TO_KEEP is set to 0
function are_backups_enabled {
  [[ "$BACKUPS_TO_KEEP" -gt 0 ]]
}

function path_to_latest_backup {
  local LATEST_BACKUP_PATH="${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_NAME}"

  # if the link doesn't exist, then warn the user and exit with proper exit code
  if [[ ! -L "$LATEST_BACKUP_PATH" ]]; then
    warn "Latest backup not found. Either never created or not a link or something. ($LATEST_BACKUP_PATH)"
    exit $EXIT_LATEST_BACKUP_NOT_FOUND
  fi

  # read the link to the latest backup
  local LATEST_BACKUP_LINK=$(readlink "$LATEST_BACKUP_PATH")

  # if the link to the latest backup is absolute, output that, otherwise, build the path and output that.
  if [[ "$LATEST_BACKUP_LINK" =~ ^/ ]]; then
    echo $LATEST_BACKUP_LINK
    exit $EXIT_SUCCESS
  fi

  echo "${BACKUP_DIRECTORY_PATH}/${LATEST_BACKUP_LINK}"
}

# given a path to a world backup, restore the current world with the contents
# when doing this, back up the current world, if it exists
function restore_world {
  start_restore
  local RESTORE_FROM=$1
  local RESTORE_FROM_WORLD="${RESTORE_FROM}/world"

  # check to make sure a RESTORE_FROM parameter is supplied
  # TODO: fix the output of this usage to show how mcwrapper was called
  [[ -z "$RESTORE_FROM" ]] \
    && { warn "USAGE: $0 restore <backup_name>"; exit $EXIT_CANNOT_RESTORE_WORLD; }

  # check to make sure world dir exists and is a dir
  [[ -e "$RESTORE_FROM" && -d "$RESTORE_FROM" && -d "${RESTORE_FROM}/world" ]] \
    || { warn "Path does not appear to be a Minecraft world backup directory or does not exist."; exit $EXIT_CANNOT_RESTORE_WORLD; }

  # back-up current world data and temporarily enable infinite retention
  # we don't want to inadvertently clobber any existing backups
  BACKUPS_TO_KEEP=-1
  backup_world

  local SERVER_IS_RUNNING
  local WORLD_DIR_PATH=$(world_dir_path)

  if check_is_running; then
    SERVER_IS_RUNNING="1"
    stop_minecraft
  else
    SERVER_IS_RUNNING="0"
  fi

  # delete old world
  rm -rf "$WORLD_DIR_PATH"

  # copy world
  cp -R "$RESTORE_FROM_WORLD" "$WORLD_DIR_PATH" \
    || { warn "Error restoring world file." ; exit $EXIT_CANNOT_RESTORE_WORLD; }
  echo "$RESTORE_FROM_WORLD" > "$WORLD_DIR_PATH/RESTORED_FROM"

  # start server if it was running when we started
  if [[ "$SERVER_IS_RUNNING" = '1' ]]; then
    start_minecraft
  fi

  end_restore
}

## End MCBackup portion.
##########################################################################################

## begin meat of program:
if [ "$BASH_SOURCE" == "$0" ]; then
  # if there are no args, then print usage and exit
  if [[ $# -eq 0 ]]; then
    print_usage
    exit $EXIT_SUCCESS
  fi

  ACTION=$1;shift

  # selfconfigure
  default_config
  read_config
  process_config || true

  exit_if_running_as_root

  # before most actions are run, sanity_check is called
  # this ensures that things are configured properly before
  # performing any actions that require specific configuration

  case $ACTION in
    help|--help|-?|-h )
      print_usage
      exit $EXIT_SUCCESS
      ;;
    version|--version )
      print_version
      exit $EXIT_SUCCESS
      ;;
    about )
      print_about
      exit $EXIT_SUCCESS
      ;;
    start )
      sanity_check
      echo -n "Starting minecraft... "
      start_minecraft
      echo "Done."
      exit $EXIT_SUCCESS
      ;;
    start-foreground )
      sanity_check
      echo "Starting minecraft in the foreground..."
      FOREGROUND=1
      start_minecraft
      exit $?
      ;;
    stop )
      sanity_check
      echo -n "Stopping minecraft... "
      stop_minecraft
      echo "Done."
      exit $EXIT_SUCCESS
      ;;
    restart )
      sanity_check
      echo -n "Restarting minecraft..."
      restart_minecraft
      echo " Done."
      exit $EXIT_SUCCESS
      ;;
    status )
      sanity_check
      if check_is_running; then
        warn "Server is running."
        exit $EXIT_SUCCESS
      fi

      warn "Server is NOT running."
      exit $EXIT_SERVER_NOT_RUNNING

      ;;
    check )
      sanity_check

      # sanity_check will exit with an exit code if it fails
      # so, assuming it didn't exit, everything is ok.

      echo "Everything looks OK!"
      exit $EXIT_SUCCESS
      ;;

    install )
      run_installer
      exit $EXIT_SUCCESS
      ;;
    update )
      sanity_check
      update_minecraft_server
      exit $EXIT_SUCCESS
      ;;
    backup )
      sanity_check
      echo "Backing up minecraft world data..."
      backup_world
      echo "Done."
      exit $EXIT_SUCCESS
      ;;
    restore )
      sanity_check
      RESTORE_FROM=$1;shift
      restore_world $RESTORE_FROM
      echo "Done."
      exit $EXIT_SUCCESS
      ;;
    log )
      sanity_check
      warn "Tailing from: ${MINECRAFT_SERVER_DIR_PATH}/server.log"
      warn "Press ^C to cancel."
      warn "-------------------------------------------------------------------------------------------"

      tail_server_log

      exit $EXIT_SUCCESS
      ;;
    genconfig )
      copy_example_configuration

      exit $EXIT_SUCCESS
      ;;
    config )
      # dump info about the config
      CONFIG_SETTING=$1
      case $CONFIG_SETTING in
        serverpath )
          echo $MINECRAFT_SERVER_PATH
          exit $EXIT_SUCCESS
          ;;
        serverdir )
          echo $MINECRAFT_SERVER_DIR_PATH
          exit $EXIT_SUCCESS
          ;;
        pidfile )
          echo $PID_FILE
          exit $EXIT_SUCCESS
          ;;
        pid )
          check_is_running
          if [[ $? != 0 ]]; then
            warn "Server is NOT running."
            exit $EXIT_SERVER_NOT_RUNNING
          fi

          echo $(read_pid)
          exit $EXIT_SUCCESS
          ;;
        pipe )
          echo $COMMAND_PIPE
          exit $EXIT_SUCCESS
          ;;
        configfile )
          echo $(get_config_path)
          exit $EXIT_SUCCESS
          ;;
        command )
          echo $MINECRAFT_SERVER_CMD
          exit $EXIT_SUCCESS
          ;;
        backupdir )
          echo $BACKUP_DIRECTORY_PATH
          exit $EXIT_SUCCESS
          ;;
        latestbackup )
          echo $(path_to_latest_backup)
          exit $EXIT_SUCCESS
          ;;
        backup-retention )
          echo $BACKUPS_TO_KEEP
          exit $EXIT_STATUS
          ;;
        *)
          echo "Unknown config setting: $CONFIG_SETTING"
          exit $EXIT_UNKNOWN_CONFIG_SETTING
          ;;
      esac
      ;;
    prop )
      sanity_check
      PROP=$1    
      read_server_property $PROP
      exit $EXIT_SUCCESS
      ;;
    command|cmd )
      sanity_check
      COMMAND="$@"
      echo -n "sending: $COMMAND ... "
      send_command "$COMMAND"
      echo "Done."
      exit $EXIT_SUCCESS
      ;;
    * )
      warn "Invalid action: $ACTION"
      warn ""
      print_usage
      exit $EXIT_INVALID_ACTION
  esac

  exit $EXIT_SUCCESS

fi

